package com.thssh;

import com.google.auto.service.AutoService;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;
import javax.tools.JavaFileObject;


@AutoService(Processor.class)
public class ViewInjectProcess extends AbstractProcessor{


    // 分类存储含有BinderView注解的  key --- activity  全类名
    private Map<String, List<VariableElement>> mVariableElement = new HashMap<>();
    // 专门生成java的工具类
    private Filer mFilter;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mFilter = processingEnvironment.getFiler();
    }

    /**
     * 指定处理哪些注解
     * @return
     */
    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> types = new LinkedHashSet<>();
        types.add(BindView.class.getCanonicalName());
        return types;
    }

    /**
     * 支持的sdk版本
     * @return
     */
    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    /**
     * 把Android的所有的java文件丢进来
     * @param set
     * @param roundEnvironment
     * @return
     */
    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {

        // 在这里生成一个class文件
        Map<String, List<VariableElement>> map = handAnnotation(roundEnvironment);

        writeJavaCalssFromMap(map);
        return false;
    }

    private void writeJavaCalssFromMap(Map<String, List<VariableElement>> map) {
        Iterator<Map.Entry<String, List<VariableElement>>> iterator = map.entrySet().iterator();
        while (iterator.hasNext()){
            Map.Entry<String, List<VariableElement>> entry = iterator.next();
            List<VariableElement> cacheElements = entry.getValue();
            if(cacheElements == null || cacheElements.size() == 0){ continue; }
            // 拿到封装类
            InjectorInfo info = createInjectInfo(cacheElements.get(0));

            // 创建一个java文件
            Writer writer = null;
            try {
//                FileUtils.write(info.getClassFullPath());
                JavaFileObject javaFileObject = mFilter.createClassFile(info.getClassFullPath());
                writer = javaFileObject.openWriter();
                writerImport(writer, info);
                for(VariableElement element : cacheElements){
                    writeField(writer, element, info);
                }
                writeEnd(writer);
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                if(writer != null){
                    try {
                        writer.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    private void writeEnd(Writer writer) throws IOException {
        writer.write("}");
        writer.write("\n\n");
        writer.write("}");
    }

    private void writeField(Writer writer, VariableElement element, InjectorInfo info) throws IOException {
        BindView bindView = element.getAnnotation(BindView.class);
        String fieldName = element.getSimpleName().toString();
        // 强转类型
        TypeMirror typeMirror = element.asType();
        writer.write("target." + fieldName + "=(" + typeMirror.toString() + ")target.findViewById(" + bindView.value() + ");");
    }

    /**
     * 写入包名加导包
     * @param writer
     * @param info
     */
    private void writerImport(Writer writer, InjectorInfo info) throws IOException {
        writer.write("package " + info.packName + ";");
        writer.write("\n\n");
        writer.write("import com.hth.butterknife.ViewBinder;");
        writer.write("import "+ info.packName + ".ViewBinder;");
        writer.write("\n\n");
//        writer.write("\n" +
//                "    /**\n" +
//                "     * this class is auto generated by zhangyugehu,\n" +
//                "     * please not modify it.\n" +
//                "     */");
        writer.write("public class " + info.newClassName + " implements ViewBinder<" + info.className + ">{");
        writer.write("\n");
        writer.write("public void bind(" + info.className + " target)");
        writer.write("\n");
    }

    private InjectorInfo createInjectInfo(VariableElement element) {
        TypeElement typeElement = (TypeElement) element.getEnclosingElement();
        String packageName = getPackageName(processingEnv, typeElement);
        String className = typeElement.getSimpleName().toString();
        return new InjectorInfo(packageName, className);
    }

    private Map<String, List<VariableElement>> handAnnotation(RoundEnvironment environment) {
        // 得到一个app里只要含有java文件的集合
        Set<? extends Element> elements = environment.getElementsAnnotatedWith(BindView.class);

        // 结构化文本 概念
//        package com.hth.butterknife;          -->     PackageElement
//
//        public class Foo {                    -->     TypeElement
//
//            @BindView(R.id.text_view)
//            public int a;                     -->     VariableElement
//
//            public Foo(){}                    -->     ExecuteableElement
//            public void fun(){}               -->     ExecuteableElement
//        }

        // 分类
        Map<String, List<VariableElement>> variableElementMap = new HashMap<>();
        for(Element element:elements){
            VariableElement variableElement = (VariableElement) element;
            String className = getParentClassName(element);
            List<VariableElement> cacheElements = variableElementMap.get(className);
            if(cacheElements == null){
                cacheElements = new ArrayList<>();
                variableElementMap.put(className, cacheElements);
            }
            cacheElements.add(variableElement);
        }
        return variableElementMap;
    }

    /**
     * 获取类名
     * @param element
     * @return
     */
    private String getParentClassName(Element element) {
        // 得到声明类的Element
        TypeElement typeElement = (TypeElement) element.getEnclosingElement();
        // processingEnv 父类成员变量
        String packageName = getPackageName(processingEnv, typeElement);
        return packageName + "." + typeElement.getSimpleName().toString();
    }

    /**
     * 获取包名
     * @param processingEnv
     * @param element
     * @return
     */
    private String getPackageName(ProcessingEnvironment processingEnv, TypeElement element) {
        return processingEnv.getElementUtils().getPackageOf(element).getQualifiedName().toString();
    }
}
